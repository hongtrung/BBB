		***BUỔI 1***
- cpu(não)
- hệ thống ngoại vi(tay chân)
- hệ thông bus(kinh mạch)
- clock(máu)



>>>>>>>>>ARM

-Application: 	+ Lập trình ứng dụng ngừoi dùng
		+ tốn năng lượng
		+ khả năng sử lý cao
-Realtime: 	+ ứng dụng có tính quan trọng về mặt thời gian thực
		+ Hard-realtime
		+ Soft-realtime
-Micontroller: 	+ Được sử dụng rộng rãi cho các hệ thống smarthome, iot...
		+ Tiết kiệm năng lượng



>>>>>>>>> Bộ BSP

- Bootloader:	Bộ nạp khởi động.(Tối ưu thời gian khởi động thêm cmd điều khiển, phân vùng lại flash,... )
- linux Kernel:	Quản lý phần mềm phần cứng
- Rootfs:	không gian chạy các ứng dụng
- Toolchain: 	Compiler, công cụ giúp phát triển các ứng dụng(có sẵn, học cách sử dụng)




>>>>>>>>> Mảng nhúng ở việt nam

- nhóm cty làm về outsource (Điển hình FPT) 
		(nhận dự án nước ngoài): nhận thiết bị bên brander, hợp tác làm ra 1 bộ BSP
	+ - Bootloader:	Bộ nạp khởi động.(Tối ưu thời gian khởi động thêm cmd điều khiển, phân vùng lại flash,... )
	+ Linux kernel: viết driver: I2C/SPI/USBT/CAN/GPIO,...
	+ Rootfs: Phát triển các ứng dụng trên tầng usr space

- nhóm cty làm về product (VNPT, FPT, Lumi, Dasan, Vinfast,...)
 	
 	VD: làm 1 con bóng đèn đáp ứng chức năng bluetooth, zigbee,...
 	
 	>>>>>HW
 	B1: tìm 1 thiết bị có sẵn trên thị trường đáp ứng được chức năng + chi phí mà bài toán đưa ra
 	B2: Design lại phần cứng, loại bỏ các thành phần không cần thiết.
 	
 	>>>>>SW
 	B1.0: Bringup, Porting hệ điều hành lên cái phần cứng đã designed.
 		- Tối ưu lại các thành phần phần mềm của hệ thống
 			+ u-boot
 			+ kernel
 			+ rootfs
 	B1.1: phát triển applications.	(TRỌNG TÂM)
 			+ Viết app

-----------------------------------------------------------------------------------------------------












		***BUỔI 2***
* Makefile
- makefile là 1 script bên trong có chứa thông tin :
	+ cấu trúc của một project(file, dependency)
	+ các command line dùng để tạo hủy file.
- chương trình make sẽ đọc nội dung trong Makefile và thực thi nó.

- cấu trúc của 1 câu lệnh Makefile 
		Target: Dependences
  		Tab	Action
  	VD:
		all: hello.c main.c 
			gcc -o examble hello.c main.c -I .
			...
		clear:
			rm -rf examble
			
$@: là target
$<: giá trị đầu tiên bên phải dấu : (dependency đầu tiên)
$^: toàn bộ giá trị nằm bên phải dấu : (toàn bộ dependency)	
	
------Các phép gán giá trị.		
var := "var"
var1 = $(var) // là phép gán đệ quy: nhận giá trị gán cuối cùng
var2 := $(var) // phép gán trực tiếp: chỉ nhận 1 giá trị tại thời điểm gán
var3 ?= $(var) // thực hiện kiểm tra xem var3 có giá trị chưa, nếu có sẽ giữ nguyên giá trị của var3, nếu chưa thực hiện phép gán đệ quy.

biến .PHONY: rule1 rule2 rule3 ... (có tác dụng tránh lỗi file trùng tên với rule không chạy chương trình)

# để comment

quy tắc set tên makefile và độ ưu tiên: Makefile>makefile>abc.mk

để chạy abc.mk --> make -f abc.mk

1 makefile muốn include đến 1 makefile khác --> include abc.mk


kiểm tra các file sửa đổi	
	INC_FILE := hello.h
	CC := gcc
	CFFLAG := -I.
	
	%.o: %.c $(INC_FILE)
		$(CC) -I. -c -o $@ $<

-o là output 
-c là đưa ra 1 file object .o

(gcc -I -c -o main.o main.c)

>>>>>>>>>>>>>>Compiling a C program
1) gia đoạn tiền sử lý(pre-processing)
	- Loại bỏ comments
	- mở rộng các macros
	- mở rộng các include file
	- biên dịch các câu lệnh điều khiển
	- kết quả thu được sau bước này là 1 fiel.i
	gcc -E hello.c -o hello.i 
	
2) giai đoạn dịch ngôn ngữ bậc cao sang asm(compilation)
	- ở gia đoạn này, mã nguồn sẽ tiếp tục thực hiện biên dịch từ file.i thu được thành 1 file.s(assembly)
	gcc -S hello.i -o hello.s
	
3) giai đoạn dịch asm sang mã máy(Assembly)
	- File.s ở giai đoạn trước tiếp tục được sử dụng cho giai đoạn này
	- thông qua assembler, output mà chúng ta thu được 1 file.o. Đây là file chứa các chỉ lệnh cấp độ ngôn ngữ máy (machine language: nhị phân 01)
	gcc -c hello.s -o hello.o
	hexdump -c hello.o
	
4) Giai đoạn linked (linking)
	- Mỗi 1 file.o thu được ở giai đoạn Assembly là một phần của chương trình
	- ở giai đoạn linking sẽ liên kết chúng để thu được 1 file thực thi hoàn chỉnh.
	gcc -o hello hello_0.o hello_1.o hello_2...
	
	
>>>>>>STATIC LIB AND SHARE LIB
	thư viện là một tập hợp các đoạn mã được biên dịch sẵn để có thể được sử dụng lại trong 1 chương trình
	
	được chia làm 2 lại 
		- static_lib: thư viện đọc
		- share_lib: thư viện chia sẻ được

	có N Source_File --> có N Object_file --> Linker}
				Runtime_library--> Linker} --> executable program

properties		static_lib			shared_lib
linking time	|all module trong thư viện	|đc sử dụng trong quá trình link khi 
		|đc copy vào file thự thi	|mà cả file thự thi và file lib được load 
		|				|vào bộ nhớ
size		|tốn nhiều bộ nhớ hơn 		|tốn ít bộ nhớ hơn


external file	|phải recompile bất cứ lúc nào	|không cần biên dịch lại file thực thi
changes		|có sự thay đổi		|


time		|mất nhiều thời gian hơn	|tốn ít hơn



* Phân chia folder 1 project
	- Bin chứa examble
	- inc chứa file.h
	- lib chứa static_lib và shared_lib
	- obj chứa file.o
	- src chứa file.c
	- main.c để ngoài 
	
* tạo static_lib
bước 1: tạo các file.o
	
	gcc -c main.c -o obj/main.o -I./inc
	
	giải thích: 	
		- c: tạo ra file object từ main.c
	    	- o: tạo ra file output đặt trong thư mục obj và có tên là main.o
	    	- I./inc: chỉ định folder chứa các file.h hay include các file.h
Bước 2: Create static lib
	
	ar rcs lib/static_lib/libhello.a obj/hello.o obj/hi.o ....  
  	
  	giải thích: 
  		- ar rsc 
	    	- lib/static_lib/libhello.a nơi lưu file lib.a
	    	- obj/hello.o obj/hi.o ... là cái file.o muốn lib
Bước 3: Link statically

	gcc obj/main.o -Llib/static_lib -lhello -o bin/exam
	
	giải thích:
		- obj/main.o: liên kết file main.o với thư viện
		- -L lib/static_lib: cờ -L biểu thị thư mục nơi có thể tìm thấy các lib
		- -l hello: cờ -l cho biết tên của thư viện bỏ (lib và .o)
		- -o bin/exam: tạo ra file output đặt trong folder bin tên là exam

*tạo shared_lib
bước 1: tạo các file.o tương tự static_lib
bước 2: create shared lib
	
	gcc -shared obj/hello.o obj/hi.o -o lib/shared_lib/libhi.so
	
	giải thích:
		- -shared: tạo lib share
		- obj/hello.o obj/hi.o... các file.o cần tạo thư viện
		- lib/shared_lib/libhi.so tạo file.so tại địa chỉ kia 
bước 3: link dynamically with the shared lib(tạo liên kết động với thư viện shared)
	
	gcc obj/main.o -L lib/shared_lib -l hi -o bin/examble









---------------------------------------------------------------------------------------


		***BUỔI 3***
I. TÔNG QUAN VỀ FILE TRÊN LINUX.
	Linux quản lý tất cả mọi thứ như 1 file
		- regular file: là các file thông thường như text file executalbel file
		- directories file: file chứa danh sách các file khác
		- character device file: file đại diện cho các thiết bị không có địa chỉ vùng nhớ
		- block device file: file đại diện cho các thiết bị có địa chỉ vùng nhớ 
		- link file: file đại diện cho 1 file khác
		- socket file: file đại diện cho 1 socket
		- pipe file: file đại diện cho 1 pipe
	lệnh ls -l lấy ra toàn bộ thông tin file
	     ls -lh
	lệnh sudo su để truy nhập quyền user root
	
		số hardlink file là số file cùng trỏ đến 1 vùng nhớ trên ổ cứng
		- loại file : "-" regular file
				"d" directories
				
user permission		group permission	other permission
r-w-x 1-1-1  7		r-w-x  1-1-1		r-w-x  1-1-1			
r-w   1-1-0  6

để loại bỏ quyền r-w-x của file sử dụng câu lệnh:
	chmod u-r <tên file> loại bỏ quyền r trong user permission
	chmod g-r <tên file> loại bỏ quyền r trong group permission
	chmod o-r <tên file> loại bỏ quyền r trong other permission
để add quyền cho file sử dụng lệnh:
	chmod u+r <tên file> add quyền r trong user permission
	chmod g+r <tên file> add quyền r trong group permission
	chmod o+r <tên file> add quyền r trong other permission
thêm quyền rw cho cả user group other sử dụng lệnh
	chmod 0666 <tên file>
full quyền 
	chmod 0777 <tên file>
chuyển quyền sở hữu file cấp user:
	sudo chown trungdoan <têb file>
chuyển quyền sở hữu file cấp user&group:
	sudo chown trungdoan:trungdoan <tên file>
	
chmod: change quyền
chown: change user group
	
II. ĐỌC GHI FILE TRÊN LINUX
* kernel cung cấp 1 bộ system call cơ bản để thực hiện việc đọc ghi và thao tác với các file bao gồm:
	- open()  
		int open(const char* pathname, int flags, mode_t mode);
	vd:
		int fd;
		fd = open("hello.txt", O_RDONLY, 0666); 
	
		+ const char* pathname: đường dẫn tới file "hello.txt"
	
		+ int flags: O_RDONLY chỉ đọc, O_WRONLY chỉ ghi, O_RDWR vừa đọc vừa ghi, O_CREAT kiểu tra xem có file chưa, chưa có thì tạo file....
	
		+ mode_t mode: r-w-x :0666
		
	- read()
		ssize_t read(int fd, void* buffer, size_t count);
	vd:
	
	- write()
		ssize_t write(int fd, void* buffer, size_t count);
	vd:
		int numb_write;
		char buf1[12] = "hello world\n";
		numb_write = write(fd, buf1, strlen(buf1));
		
	- lseek()
		off_t lseek(int fd, off_t offset, int whence);
	vd: 	lseek(fd, 2, SEEK_SET);
	SEEK_SET: con trỏ file ở đầu file
	SEEK_CUR: con trỏ file ở vị trí hiện tại 
	SEEK_END: con trỏ file ở cuối file
		
	- close()
		int close(int fd);
	vd 	close (fd);

fd: file descriptor(định danh của file)

III. Quản lý file trong Linux
* kernel điều khiển việc tương tác giữa các tiến trình thông qua 3 bảng

- file descriptor table: 

- open file table: chứa các inode ptr, status flag, file offset(SEEK_SET+0,SEET_SET +1,...)

- i-node table: mỗi phần tử trong bảng i-node đại diện cho 1 file chứa các thông tin của file như: inode number, file type, size, hardlink, permission, file ptr

	Thực hiện đọc ghi thì từ file descriptor->open file -> i node file

* trong cùng 1 process có thể có nhiều FDs cùng tham chiếu vào 1 vị trí trong OFD
 sử dụng dup(), dup2().
* hai process mở cùng 1 file tham chiếu tới cùng 1 OFD
sử dụng fork()
* 2 process cùng mở 1 file tham chiếu tới cùng 1 inode
* khi tiến trình dùng lệnh read()/write()

READ()
1. kernel xác định page cần đọc
2. kernel đọc từ page cache
3. nếu page có trong page cache thông tin sẽ được đọc ra
4. Nếu page không có trong page cache, Đọc từ cùng nhớ vật lý vào page cache sau đó đọc ra cho userspace

WRITE()
1. kernel ghi nội dung page vào page cache
2. page cache sẽ được ghi vào vùng nhớ vật lý định kỳ hoặc khi dùng các lệnh sync(), fsync().

IV. File locking
- record lock
- file lock

-file locking dùng để quản lý việc nhiều tiến trình cùng đọc/ghi vào 1 file
- cách hoạt động:
bước 1: ghi trạng thái vào i node của file
bước 2: nếu thành công thì thực hiện đọc ghi file, nếu không thânhf công nghĩa là file đang đc tiến trình khác sử dụng
bước 3: sau khi đọc/ghi xong gỡ trạng thái lock ra khỏi i node của file

Flock() đơn giản, thông tin ghi vào inode là trạng thái lock, lock toàn bộ file. tại 1 thời điểm chỉ có 1 tiến trình đọc/ghi file

Fcntl()	phức tạp, thông tin ghi vào inode là trạng thái lock, khu vực lock, tiến trình lock, lock được từng khu vực của file, nhiều tiến trình có thể đọc/ghi cùng 1 file mà không bị xung đột					

-lock file với flock()
	int flock(int fd, int operation);
	Flock dựa vào thông tin file descirptor để đặt trạng thái lock vào inode table
	
	các đối số:
	fd: file descriptor của file cần lock
	operation: giá trị lock muốn set
	- LOCK_SH: nếu set giá trị này thành công tiến trình có thể đọc file, không ghi
	- LOCK_EX: nếu set giá trị này thành công tiến trình có thể đọc ghi file 
	- LOCK_UN: set giá trị này để báo rằng file không bị lock
	- LOCK_NB: nếu không dùng flag này hàm flock sẽ không kết thúc cho tới khi set được lock.
	
	TIến trình A			Tiến trình B
	lock_sh			có thể set lock_sh, không thể set lock_ex
	lock_ex			không thể set lock_sh, lock_ex
	

- lock file với fcntl()
	fcntl(fd, cmd, &flockstr)
	fcntl linh hoạt hơn flock. fcntl cho phép lock từng phần của file(thậm chí đến từng byte). thông tin lock đặt vào inode table sẽ gồm process ID, trạng thái lock, vùng lock
	
	các đối số:
	. fd: file descriptor của file cần lock
	. cmd: action muốn thực hiện
		. F_SETLK: đặt lock, bỏ lock
		. F_GETLK: đọc thông tin lock
	. flockstr: thông tin muốn lock(gồm trạng thái lock, vùng muốn lock, process lock)
	 
	 struct flock
	 {
		short l_type;	//lock type: F_RDLCK, F_WRLCK, F_UNLCK
		short l_whence;	// how ti interpret 'I_start': SEEK_SET, SEEK_CUR, SEEK_END
		
		off_t l_start;	// offset where the lock begins
	 	off_t l_len;	// number of byte to lock, 0 means "until EOF"
	 	pid_t l_pid;	// process preventing our lock(F_GETLK only)
	 }	
struct flock fl{
	fl.l_start = 1;                         // offset vi tri lock dau tien
        fl.l_len = 5;                           // number of bytes to lock, 0 means lock "until EOF" 
        fl.l_type = F_WRLCK;                    // lock type: F_RDLCK, F_WRLCK, F_UNLCK
        fl.l_whence = SEEK_SET;                 // how to interpret: SEEK_SET, SEEK_CUR, SEEK_END
}






















































